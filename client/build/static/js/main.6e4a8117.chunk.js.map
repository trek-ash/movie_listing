{"version":3,"sources":["components/Home/Filters/index.js","components/Home/Movie_card/index.js","components/Home/Results/index.js","constants/index.js","services/favourites/index.js","components/Home/Home.js","components/Landing/Form/index.js","components/Landing/Login/index.js","components/Landing/Landing.js","components/Header/index.js","services/auth/index.js","components/Landing/Register/index.js","components/Favourites/index.js","App.js","serviceWorker.js","index.js"],"names":["Filters","props","type","id","placeholder","className","onChange","Change","MovieCard","movie","original_title","title","isFavourite","onClick","removeFromFavourite","movie_id","addToFavourite","overview","vote_average","Results","result","results","map","key","api_base_url","Favourite","add","email","requestOptions","method","headers","body","JSON","stringify","Promise","res","rej","fetch","then","response","status","json","catch","err","remove","getFavourites","Body","favourite","Home","typingTimer","useState","searchRes","updateSearchRes","fetchSearchResult","searchVal","url","console","log","useEffect","auth","isAuthenticated","to","document","getElementById","value","clearTimeout","setTimeout","getEmail","Form","updateEmail","password","updatePassword","onSubmit","e","preventDefault","action","name","target","role","Login","history","useHistory","login","push","Landing","Header","logout","jwt","require","Register","register","Favourites","favourites","getFavourite","setSession","handleAuthentication","accessToken","localStorage","setItem","split","removeItem","getItem","token","decode","App","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mYAgBeA,EAdC,SAACC,GACb,OACI,6BACI,2BACAC,KAAK,OACLC,GAAG,aACHC,YAAY,aACZC,UAAU,eACVC,SAAUL,EAAMM,WCqBbC,EA9BG,SAACP,GACf,OACI,yBAAKI,UAAU,aACX,yBAAKA,UAAU,eACVJ,EAAMQ,MAAMC,gBAAkBT,EAAMQ,MAAME,MAEvCV,EAAMW,YACN,oCACA,0BACAP,UAAU,cACVQ,QAAS,kBAAIZ,EAAMa,oBAAoBb,EAAMQ,MAAMM,YAFnD,0BAMC,0BACDV,UAAU,cACVQ,QAAS,kBAAIZ,EAAMe,eAAef,EAAMQ,MAAMC,eAAgBT,EAAMQ,MAAMQ,SAAUhB,EAAMQ,MAAMN,MAF/F,oBAOJF,EAAMQ,MAAMC,gBAEjB,yBAAKL,UAAU,aAAaJ,EAAMQ,MAAMQ,UACxC,yBAAKZ,UAAU,eACX,0BAAMA,UAAU,eAAc,sCAA9B,IAA8CJ,EAAMQ,MAAMS,iBCT3DC,EAdC,SAAClB,GAAU,IAAD,IACtB,OACI,yBAAKI,UAAU,mBAENJ,EAAMmB,OAAP,UAGAnB,EAAMmB,cAHN,iBAGA,EAAcC,eAHd,aAGA,EAAuBC,KAAI,SAACb,GACxB,OAAO,kBAAC,EAAD,CAAWO,eAAgBf,EAAMe,eAAgBF,oBAAqBb,EAAMa,oBAAqBS,IAAKd,EAAMN,GAAIM,MAAOA,OAHlI,e,gBCNHe,EAAe,wB,QCwFbC,E,sCAtFXC,IAAM,SAACC,EAAOhB,EAAOM,EAAUF,GAE3B,IAAMa,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAC,eAAe,mBAAoBH,MAAOA,GACpDI,KAAMC,KAAKC,UAAU,CAAEtB,MAAOA,EAAOM,SAAUA,EAAUF,SAAUA,KAEvE,OAAO,IAAImB,SAAQ,SAACC,EAAKC,GACrBC,MAAM,GAAD,OACEb,EADF,yBAEDI,GAEHU,MAAK,SAAAC,GAEF,OAAqB,MAAlBA,EAASC,OACDL,GAAI,GAEHI,EAASE,UAExBH,MAAK,SAAAC,GAIEJ,IAFDI,MAONG,OAAM,SAAAC,GAAG,OAAEP,EAAIO,U,KAIxBC,OAAS,SAACjB,EAAOZ,GACb,IAAMa,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAC,eAAe,mBAAoBH,MAAOA,GACpDI,KAAMC,KAAKC,UAAU,CAAElB,SAAUA,KAErC,OAAO,IAAImB,SAAQ,SAACC,EAAKC,GACrBC,MAAM,GAAD,OACEb,EADF,4BAEDI,GAEHU,MAAK,SAAAC,GAEF,OAAqB,MAAlBA,EAASC,OACDL,GAAI,GAEHI,EAASE,UAExBH,MAAK,SAAAC,GACFJ,EAAII,MAEPG,OAAM,SAAAC,GAAG,OAAEP,EAAIO,U,KAIxBE,cAAgB,SAAClB,GACb,IAAMC,EAAiB,CACnBC,OAAQ,MACRC,QAAS,CAAC,eAAe,mBAAoBH,MAAOA,IAGxD,OAAO,IAAIO,SAAQ,SAACC,EAAKC,GACrBC,MAAM,GAAD,OACEb,EADF,qBAEDI,GAEHU,MAAK,SAAAC,GAEF,OAAqB,MAAlBA,EAASC,OACDL,GAAI,GAEHI,EAASE,UAExBH,MAAK,SAAAC,GACFJ,EAAII,EAASO,SAGhBJ,OAAM,SAAAC,GAAG,OAAEP,EAAIO,WC3EtBI,EAAY,IAAItB,EAyEPuB,EAvEF,SAAC/C,GAAW,IAEjBgD,EAFgB,EACeC,mBAAS,IADxB,mBACfC,EADe,KACJC,EADI,KAadC,EAAoB,SAACC,GAEvB,IAAIC,EAAG,UFxBmB,+BEwBnB,iCFzBQ,mCEyBR,4DAA4GD,GACnHjB,MACIkB,EACA,CACA1B,OAAQ,QAGXS,MAAK,SAACH,GAAD,OAAQA,EAAIM,UACjBH,MAAK,SAACH,GACHqB,QAAQC,IAAItB,GACZiB,EAAgBjB,MAEpBqB,QAAQC,IAAIH,IAoBhB,OAHAI,qBAAU,WACNF,QAAQC,IAAIN,KACb,CAACA,IAEQlD,EAAM0D,KAAKC,kBACX,oCAEI,yBAAKvD,UAAU,kBACX,yBAAKA,UAAU,sBACX,kBAAC,IAAD,CAAMwD,GAAG,eAAT,eAEJ,wCAEA,6BACI,kBAAC,EAAD,CAAStD,OAtDN,WACvB,IAAI+C,EAAYQ,SAASC,eAAe,cAAcC,MAEtDC,aAAahB,GACTK,IACAL,EAAciB,YAAW,kBAAKb,EAAkBC,KANnC,SAwDG,kBAAC,EAAD,CAASlC,OAAQ+B,EAAWnC,eA7B7B,SAACL,EAAOM,EAAUF,GAErC,IAAIY,EAAQ1B,EAAM0D,KAAKQ,WAEvBpB,EAAUrB,IAAIC,EAAOhB,EAAOM,EAAUF,IAyB0CD,oBAtBxD,SAACC,GAEzB,IAAIY,EAAQ1B,EAAM0D,KAAKQ,WAEvBpB,EAAUH,OAAOjB,EAAOZ,SAsBhB,kBAAC,IAAD,CAAU8C,GAAG,OC7CdO,G,OA3BF,SAACnE,GAAU,IAAD,EACUiD,mBAAS,IADnB,mBACZvB,EADY,KACL0C,EADK,OAEgBnB,mBAAS,IAFzB,mBAEZoB,EAFY,KAEFC,EAFE,KAGnB,OACI,0BAAMC,SAAU,SAAAC,GAAMA,EAAEC,iBAAkBzE,EAAM0E,OAAOhD,EAAO2C,KAC1D,2BACApE,KAAK,QACL0E,KAAK,QACLvE,UAAU,eACV2D,MAAOrC,EACPrB,SAAU,SAAAmE,GAAC,OAAEJ,EAAYI,EAAEI,OAAOb,QAClC5D,YAAY,cACZD,GAAG,UACH,2BACAD,KAAK,WACL0E,KAAK,WACLvE,UAAU,oBACV2D,MAAOM,EACPhE,SAAU,SAAAmE,GAAC,OAAEF,EAAeE,EAAEI,OAAOb,QACrC5D,YAAY,iBACZD,GAAG,aAEH,4BAAQE,UAAU,mCAAmCH,KAAK,UAAUD,EAAM6E,SCnBvE,SAASC,EAAM9E,GAC1B,IAAM+E,EAAUC,cAYhB,OACI,yBAAK5E,UAAU,0BACX,wDADJ,KACuC,6BACnC,kBAAC,EAAD,CACQyE,KAAK,QACLH,OAfA,SAAChD,EAAO2C,GACpBrE,EAAM0D,KAAKuB,MAAMvD,EAAO2C,GACvBhC,MAAK,SAACH,GACC6C,EAAQG,KAAK,YAEpBzC,OAAM,SAAAC,GACHqC,EAAQG,KAAK,gBAWb,yBAAK9E,UAAU,QAAf,cAAiC,kBAAC,IAAD,CAAMwD,GAAE,aAAR,cCpB9B,SAASuB,EAAQnF,GAE5B,OACqB,MAFGA,EAAM0D,KAAKC,kBAG/B,oCACI,yBAAKvD,UAAU,qBACX,kBAAC0E,EAAD,CAAOpB,KAAM1D,EAAM0D,SAG3B,kBAAC,IAAD,CAAUE,GAAG,U,WCqBNwB,EA/BA,SAACpF,GACZ,IAAM+E,EAAUC,cACVrB,EAAkB3D,EAAM0D,KAAKC,kBAKnC,OACI,yBAAKvD,UAAU,2BAEXuD,EACA,oCACA,yBAAKvD,UAAU,eACf,4BACAA,UAAU,6BACVQ,QAZS,WACfZ,EAAM0D,KAAK2B,SACXN,EAAQG,KAAK,OAQP,WAOA,GAEF,8CAAmB,+DCxBzBI,EAAMC,EAAQ,KCEH,SAASC,EAASxF,GAC7B,IAAM+E,EAAUC,cAahB,OACI,yBAAK5E,UAAU,0BACX,0DADJ,IACwC,6BACpC,kBAAC,EAAD,CACIyE,KAAK,WACLH,OAjBO,SAAChD,EAAO2C,GACvBd,QAAQC,IAAI9B,EAAO2C,GACnBrE,EAAM0D,KAAK+B,SAAS/D,EAAO2C,GAC1BhC,MAAK,WACF0C,EAAQG,KAAK,YAEhBzC,OAAM,SAAAC,GACHqC,EAAQG,KAAK,mBAYb,yBAAK9E,UAAU,QAAf,kBAAqC,kBAAC,IAAD,CAAMwD,GAAG,UAAT,WCnBjD,IA2Ce8B,EA3CI,SAAC1F,GACAgF,cAAhB,IAD0B,EAGS/B,mBAAS,MAHlB,mBAGnB0C,EAHmB,KAGPC,EAHO,KAIpB/E,EAAsB,SAACC,GACzBd,EAAM8C,UAAUH,OAAO3C,EAAM0D,KAAKQ,WAAYpD,GAC7CuB,MAAK,SAACH,GACH0D,EAAa1D,EAAIW,KAAK8C,gBAS9B,OANAlC,qBAAU,WACNzD,EAAM8C,UAAUF,cAAc5C,EAAM0D,KAAKQ,YAAY7B,MAAK,SAACH,GAEvD0D,EAAa1D,QAElB,IAEC,6BAEIlC,EAAM0D,KAAKC,gBAEX,oCACA,yBAAKvD,UAAU,0BACX,yBAAKA,UAAU,sBACX,kBAAC,IAAD,CAAMwD,GAAG,SAAT,SAEJ,6CACA,oCAEI+B,QAFJ,IAEIA,OAFJ,EAEIA,EACEtE,KAAI,SAACb,GACH,OAAO,kBAAC,EAAD,CAAWK,oBAAqBA,EAAqBS,IAAKd,EAAMM,SAAUN,MAAOA,EAAOG,YAAY,eAOnH,kBAAC,IAAD,CAAUiD,GAAG,QChCvBF,EAAO,I,iDHNTuB,MAAQ,SAACvD,EAAO2C,GACZ,IAAM1C,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAC,eAAe,oBACzBC,KAAMC,KAAKC,UAAU,CAAEN,MAAOA,EAAO2C,SAAUA,KAEnD,OAAO,IAAIpC,SAAQ,SAACC,EAAKC,GACrBC,MAAM,GAAD,OACEb,EADF,UAEDI,GAEHU,MAAK,SAAAC,GAEF,OAAqB,MAAlBA,EAASC,OACDL,GAAI,GAEHI,EAASE,UAExBH,MAAK,SAAAC,GACFiB,QAAQC,IAAIlB,GACTA,GACC,EAAKZ,MAAQA,EACb,EAAKmE,WAAWvD,GAChBJ,GAAI,IAGJA,GAAI,MAEXO,OAAM,SAAAC,GAAG,OAAEP,EAAIO,U,KAKxB+C,SAAW,SAAC/D,EAAO2C,GACf,IAAM1C,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAC,eAAe,oBACzBC,KAAMC,KAAKC,UAAU,CAAEN,MAAOA,EAAO2C,SAAUA,KAEnD,OAAO,IAAIpC,SAAQ,SAACC,EAAKC,GACrBC,MAAM,GAAD,OACEb,EADF,aAEDI,GAEHU,MAAK,SAAAC,GAEF,OAAOA,EAASE,UAEnBH,MAAK,SAAAC,GAECA,GACC,EAAKZ,MAAMA,EACX,EAAKmE,WAAWvD,GAChBJ,GAAI,IAGJA,GAAI,MAEXO,OAAM,SAAAC,GAEHP,EAAIO,U,KAMhBoD,qBAAuB,a,KAKvBD,WAAa,SAACE,GACVC,aAAaC,QAAQ,eAAgBF,EAAYlD,KAAKqD,MAAM,KAAK,K,KAIrEb,OAAS,WACLW,aAAaG,WAAW,iB,KAI5BxC,gBAAkB,WAId,OAHsBqC,aAAaI,QAAQ,iB,KAM/ClC,SAAW,WACP,IAAMmC,EAAQL,aAAaI,QAAQ,gBACnC,OAAOd,EAAIgB,OAAOD,GAAO3E,QGnF3BoB,EAAY,IAAItB,EAqBP+E,MApBf,SAAavG,GACX,OACE,kBAAC,IAAD,KAEI,8BACE,kBAAC,EAAD,CAAQ0D,KAAMA,IACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8C,KAAK,IAAIC,OAAK,EAACC,OAAQ,SAAA1G,GAAK,OAAE,kBAAC,EAAD,eAAS0D,KAAMA,GAAU1D,OAC9D,kBAAC,IAAD,CAAOwG,KAAK,QAASE,OAAQ,SAAA1G,GAAK,OAAE,kBAAC,EAAD,eAAM0D,KAAMA,GAAU1D,OAC1D,kBAAC,IAAD,CAAOwG,KAAK,SAAUC,OAAK,EAACC,OAAQ,SAAA1G,GAAK,OAAE,kBAAC8E,EAAD,eAAOpB,KAAMA,GAAU1D,OAClE,kBAAC,IAAD,CAAOwG,KAAK,YAAaE,OAAQ,SAAA1G,GAAK,OAAE,kBAACwF,EAAD,eAAU9B,KAAMA,GAAU1D,OAClE,kBAAC,IAAD,CAAOwG,KAAK,cAAcE,OAAQ,SAAA1G,GAAK,OAAE,kBAAC,EAAD,eAAY0D,KAAMA,EAAMZ,UAAWA,GAAe9C,WCZnF2G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFpD,SAASC,eAAe,SDwHpB,kBAAmBoD,WACrBA,UAAUC,cAAcC,MACrB/E,MAAK,SAAAgF,GACJA,EAAaC,gBAEd7E,OAAM,SAAA8E,GACLhE,QAAQgE,MAAMA,EAAMC,c","file":"static/js/main.6e4a8117.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filters = (props)=>{\n    return(\n        <div>\n            <input \n            type=\"text\" \n            id=\"searchText\"\n            placeholder=\"Search ...\"\n            className=\"form-control\"\n            onChange={props.Change}    \n            />\n        </div>\n    )\n}\n\nexport default Filters;","import React from 'react'\nconst MovieCard = (props) =>{\n    return (\n        <div className=\"card mt-4\">\n            <div className=\"card-header\">\n                {props.movie.original_title || props.movie.title}\n                {   \n                    props.isFavourite?\n                    <>\n                    <span \n                    className=\"float-right\"\n                    onClick={()=>props.removeFromFavourite(props.movie.movie_id)}>\n                        Remove from favourite\n                    </span>\n                    </>\n                    :<span \n                    className=\"float-right\"\n                    onClick={()=>props.addToFavourite(props.movie.original_title, props.movie.overview, props.movie.id )}>\n                        Add to favourite\n                    </span>    \n                }\n                \n                {props.movie.original_title}\n            </div>\n            <div className=\"card-body\">{props.movie.overview}</div>\n            <div className=\"card-footer\">\n                <span className=\"float-right\"><b>Rating:</b> {props.movie.vote_average}</span>\n            </div>\n        </div>\n    )\n}\nexport default MovieCard","import React from 'react'\nimport MovieCard from '../Movie_card'\n\nconst Results = (props) =>{\n    return(\n        <div className=\"mt-4 border p-2\">\n            {\n                !props.result ?\n                'No Results'\n                :\n                props.result?.results?.map((movie)=> {\n                    return <MovieCard addToFavourite={props.addToFavourite} removeFromFavourite={props.removeFromFavourite} key={movie.id} movie={movie}/>\n                })\n            }\n        </div>\n    )\n}\nexport default Results","export const api_key = '9500fbf690cb228f96fef08854b76a46';\nexport const movie_api_base_url = 'https://api.themoviedb.org/3';\nexport const api_base_url = 'http://localhost:8000';","import { api_base_url } from '../../constants'; \n\nclass Favourite{\n    \n    add = (email, title, overview, movie_id) => {\n        \n        const requestOptions = {\n            method: 'POST',\n            headers: {'content-type':'application/json', email: email},\n            body: JSON.stringify({ title: title, overview: overview, movie_id: movie_id})\n        };\n        return new Promise((res, rej)=>{\n            fetch(\n                `${api_base_url}/movie/favourites/add`,\n                requestOptions\n            )\n            .then(response => {\n                \n                if(response.status===400)\n                    return res(false)\n                \n                else return response.json()\n            })\n            .then(response => {\n                \n                if(response){\n                \n                    res(true)\n                }\n                else\n                    res(false)\n            })\n            .catch(err=>rej(err))\n        })\n    }\n\n    remove = (email, movie_id) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'content-type':'application/json', email: email},\n            body: JSON.stringify({ movie_id: movie_id})\n        };\n        return new Promise((res, rej)=>{\n            fetch(\n                `${api_base_url}/movie/favourites/remove`,\n                requestOptions\n            )\n            .then(response => {\n                \n                if(response.status===400)\n                    return res(false)\n                \n                else return response.json()\n            })\n            .then(response => {\n                res(response)\n            })\n            .catch(err=>rej(err))\n        })\n    }\n\n    getFavourites = (email) => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {'content-type':'application/json', email: email},\n            \n        };\n        return new Promise((res, rej)=>{\n            fetch(\n                `${api_base_url}/movie/favourites`,\n                requestOptions\n            )\n            .then(response => {\n                \n                if(response.status===400)\n                    return res(false)\n                \n                else return response.json()\n            })\n            .then(response => {\n                res(response.Body)\n                \n            })\n            .catch(err=>rej(err))\n        })\n    }\n    \n    \n}\n\nexport default Favourite;","import React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport Filters from './Filters';\nimport Results from './Results';\nimport { Redirect, Link } from \"react-router-dom\";\nimport { api_key, movie_api_base_url } from '../../constants';\nimport Favourite from '../../services/favourites'\nconst favourite = new Favourite()\n\nconst Home = (props) => {\n    let [searchRes, updateSearchRes] = useState('')\n    let typingTimer;               \n    let searchInterval = 2000; \n    const handleSearchChange = ()=>{\n        let searchVal = document.getElementById(\"searchText\").value;\n        \n        clearTimeout(typingTimer);\n        if (searchVal) {\n            typingTimer = setTimeout(()=> fetchSearchResult(searchVal), searchInterval);\n        }\n    }\n\n    const fetchSearchResult = (searchVal) => {\n        //do something\n        let url = `${movie_api_base_url}/search/movie?api_key=${api_key}&language=en-US&page=1&include_adult=false&query=${searchVal}`\n        fetch(\n            url,\n            {\n            method: \"GET\",\n            }\n        )\n        .then((res)=> res.json())\n        .then((res)=>{\n            console.log(res)\n            updateSearchRes(res)\n        })\n        console.log(searchVal)\n    }\n\n    const addToFavourite = (title, overview, movie_id) => {\n        \n        let email = props.auth.getEmail()\n\n        favourite.add(email, title, overview, movie_id)\n    }\n\n    const removeFromFavourite = (movie_id) => {\n        \n        let email = props.auth.getEmail()\n\n        favourite.remove(email, movie_id)\n    }\n\n    useEffect(()=>{\n        console.log(searchRes)\n    }, [searchRes])\n    return (\n                props.auth.isAuthenticated()?\n                <>\n                    \n                    <div className=\"container mt-5\">\n                        <div className=\"my-3 border-bottom\">\n                            <Link to=\"/favourites\">Favourites</Link>\n                        </div>\n                        <h2>Welcome!</h2>\n                        \n                        <div> \n                            <Filters Change={handleSearchChange} />\n                            <Results result={searchRes} addToFavourite={addToFavourite} removeFromFavourite={removeFromFavourite}/>\n                        </div>\n                    </div>\n                </>:\n                <Redirect to=\"/\" />\n                  \n           \n            \n  \n    )\n}\n\nexport default Home;","import React, { useState } from 'react'\nconst Form = (props) =>{\n    const [email, updateEmail] = useState('')\n    const [password, updatePassword] = useState('')\n    return(\n        <form onSubmit={e => {e.preventDefault(); props.action(email, password)}}>\n            <input \n            type=\"email\" \n            name=\"email\" \n            className=\"form-control\"\n            value={email}\n            onChange={e=>updateEmail(e.target.value)}\n            placeholder=\"Enter email\"\n            id=\"email\"/>\n            <input \n            type=\"password\" \n            name=\"password\" \n            className=\"form-control mt-3\"\n            value={password}\n            onChange={e=>updatePassword(e.target.value)}\n            placeholder=\"Enter password\"\n            id=\"password\"/>\n\n            <button className=\"btn btn-primary float-right mt-4\" type=\"submit\">{props.role}</button>  \n        </form>\n    )\n}\n\nexport default Form;","import React from 'react';\nimport Form from '../Form';\nimport {  Link,useHistory } from 'react-router-dom'\n\nexport default function Login(props){\n    const history = useHistory()\n\n    const onLogin = (email, password) => {        \n        props.auth.login(email, password)\n        .then((res)=>{\n                history.push('/home')\n        })\n        .catch(err=>{\n            history.push('/login')\n            \n        })\n    }\n    return(\n        <div className='container mx-auto mt-5'>\n            <h3>Please login to continue</h3>  <br/>\n            <Form \n                    role='login'\n                    action={onLogin}\n            />   \n            <div className='mt-4'> New User? <Link to={`/Register`}>Register</Link></div>\n       </div>\n    )\n}","import React from 'react';\nimport { BrowserRouter as Router, Link, Redirect } from \"react-router-dom\";\nimport './Landing.css';\nimport Login from './Login'\nexport default function Landing(props){\n    const isAuthenticated = props.auth.isAuthenticated();\n    return(\n        isAuthenticated==null?\n        <>  \n            <div className='container mx-auto'>\n                <Login auth={props.auth}/>\n            </div>\n        </>:\n        <Redirect to=\"/home\" />\n    )\n}","import React from 'react';\nimport { useHistory } from 'react-router-dom'\nimport './header.css'\nconst Header = (props)=>{\n    const history = useHistory()\n    const isAuthenticated = props.auth.isAuthenticated()\n    const onLogout = () => { \n      props.auth.logout()\n      history.push('/')\n    }\n    return (\n        <nav className=\"py-5 px-4 border-bottom\">\n          {\n            isAuthenticated?\n            <>\n            <div className=\"clear-both\"></div>\n            <button \n            className=\"float-right btn btn-danger\"\n            onClick={onLogout}\n            >\n              Logout\n            </button>   \n            </>:\n            ''\n          }\n          <h1>Movie Finder | <small>Search what to watch next</small></h1>\n          \n\n          \n          \n        </nav>\n    )\n}\n\nexport default Header;","import { api_base_url } from '../../constants'; \nvar jwt = require(\"jsonwebtoken\");\n\nclass Auth {\n    \n    login = (email, password) =>{\n        const requestOptions = {\n            method: 'POST',\n            headers: {'content-type':'application/json'},\n            body: JSON.stringify({ email: email, password: password})\n        };\n        return new Promise((res, rej)=>{\n            fetch(\n                `${api_base_url}/login`,\n                requestOptions\n            )\n            .then(response => {\n                \n                if(response.status===400)\n                    return res(false)\n                \n                else return response.json()\n            })\n            .then(response => {\n                console.log(response)\n                if(response){\n                    this.email = email\n                    this.setSession(response)\n                    res(true)\n                }\n                else\n                    res(false)\n            })\n            .catch(err=>rej(err))\n        })\n        \n    }\n\n    register = (email, password) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'content-type':'application/json'},\n            body: JSON.stringify({ email: email, password: password})\n        };\n        return new Promise((res, rej)=>{\n            fetch(\n                `${api_base_url}/register`,\n                requestOptions\n            )\n            .then(response => {\n                \n                return response.json()\n            })\n            .then(response => {\n                \n                if(response){\n                    this.email=email\n                    this.setSession(response)\n                    res(true)\n                }\n                else\n                    res(false)\n            })\n            .catch(err=>{\n                \n                rej(err)\n            })\n        })\n        \n    }\n\n    handleAuthentication = () => {\n        \n    }\n\n    // Sets user details in localStorage\n    setSession = (accessToken) => {\n        localStorage.setItem('access_token', accessToken.Body.split(' ')[1]);\n    }\n\n    // removes user details from localStorage\n    logout = () => {\n        localStorage.removeItem('access_token');\n    }\n\n    // checks if the user is authenticated\n    isAuthenticated = () => {\n        let isAuthenticated = localStorage.getItem('access_token');\n        // return new Date().getTime() < expiresAt.exp;;\n        \n        return isAuthenticated\n    }\n\n    getEmail = () => {\n        const token = localStorage.getItem('access_token')\n        return jwt.decode(token).email;\n    }    \n\n\n}\n\nexport default Auth;","import React from 'react';\nimport Form from '../Form';\nimport {  Link,useHistory } from 'react-router-dom'\nexport default function Register(props){\n    const history = useHistory()\n    const onRegister = (email, password) =>{\n        console.log(email, password)\n        props.auth.register(email, password)\n        .then(()=>{\n            history.push('/home')\n        })\n        .catch(err=>{\n            history.push('/register')\n            \n        })\n        \n    }\n    return(\n        <div className='container mx-auto mt-5'>\n            <h3>Register yourself with us </h3> <br/>\n            <Form \n                role='Register'\n                action={onRegister}\n            />\n            <div className='mt-4'>Existing User: <Link to=\"/login\">Login</Link></div>\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport { Redirect, useHistory, Link } from 'react-router-dom';\nimport MovieCard from '../Home/Movie_card';\n\n\nconst Favourites = (props) => {\n    const history = useHistory()\n\n    const [favourites, getFavourite] = useState(null)\n    const removeFromFavourite = (movie_id) =>{\n        props.favourite.remove(props.auth.getEmail(), movie_id)\n        .then((res)=>{ \n            getFavourite(res.Body.favourites)\n        })\n    }\n    useEffect(()=>{\n        props.favourite.getFavourites(props.auth.getEmail()).then((res)=>{\n            \n            getFavourite(res)\n        })\n    }, [])\n    return(\n        <div>\n        {\n            props.auth.isAuthenticated?\n            \n            <>\n            <div className=\"container mx-auto mt-5\">\n                <div className=\"my-3 border-bottom\">\n                    <Link to=\"/home\">Home</Link>\n                </div>\n                <h3>My Favourites</h3>\n                <div>\n                {\n                    favourites\n                    ?.map((movie)=> {\n                        return <MovieCard removeFromFavourite={removeFromFavourite} key={movie.movie_id} movie={movie} isFavourite='true'/>\n                    })        \n                    \n                }</div>\n            </div> \n            </>\n            :\n                <Redirect to=\"/\" />\n        }\n        </div>\n    )\n}\nexport default Favourites;","import React from 'react';\nimport './App.css';\nimport Home from './components/Home/Home';\nimport Landing from './components/Landing/Landing';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Header from './components/Header';\nimport Auth from './services/auth';\nimport Login from './components/Landing/Login';\nimport Register from './components/Landing/Register';\nimport Favourites from './components/Favourites';\nimport Favourite from './services/favourites'\nconst auth = new Auth();\nconst favourite = new Favourite()\nfunction App(props) {\n  return (\n    <Router>\n     \n        <main>\n          <Header auth={auth}/>\n          <Switch>\n            <Route path=\"/\" exact render={props=><Landing auth={auth} {...props}/>} />\n            <Route path=\"/home\"  render={props=><Home auth={auth} {...props}/>} />\n            <Route path=\"/login\"  exact render={props=><Login auth={auth} {...props}/>}/>\n            <Route path=\"/register\"  render={props=><Register auth={auth} {...props}/>}/>\n            <Route path=\"/favourites\" render={props=><Favourites auth={auth} favourite={favourite} {...props}/>}/>\n            {/* <Route path=\"/contact\"  component={Contact} /> */}\n          </Switch>\n        </main>\n       \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}